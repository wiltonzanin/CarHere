{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from \"react\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport * as ImagePicker from \"expo-image-picker\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function SelecionarFotoGaleria() {\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      image = _useState2[0],\n      setImage = _useState2[1];\n\n  useEffect(function () {\n    (function _callee() {\n      var _await$ImagePicker$re, status;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(Platform.OS !== \"web\")) {\n                _context.next = 8;\n                break;\n              }\n\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(ImagePicker.requestMediaLibraryPermissionsAsync());\n\n            case 3:\n              _await$ImagePicker$re = _context.sent;\n              status = _await$ImagePicker$re.status;\n\n              if (!(status !== \"granted\")) {\n                _context.next = 8;\n                break;\n              }\n\n              alert(\"Opa, precisamos da permissão de acesso a galeria para que possamos salvar as imagens :)\");\n              return _context.abrupt(\"return\");\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n\n  var pickImage = function pickImage() {\n    var result, uri;\n    return _regeneratorRuntime.async(function pickImage$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(ImagePicker.launchImageLibraryAsync({\n              mediaTypes: ImagePicker.MediaTypeOptions.Images,\n              allowsEditing: true,\n              aspect: [4, 3],\n              quality: 1\n            }));\n\n          case 2:\n            result = _context2.sent;\n            console.log(result);\n\n            if (!result.cancelled) {\n              _context2.next = 6;\n              break;\n            }\n\n            return _context2.abrupt(\"return\");\n\n          case 6:\n            uri = result.uri;\n            setImage(uri);\n\n          case 8:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return _jsxs(View, {\n    style: {\n      flex: 1,\n      alignItems: \"center\",\n      justifyContent: \"center\"\n    },\n    children: [_jsx(Button, {\n      title: \"Bot\\xE3o chato\",\n      onPress: pickImage\n    }), image && _jsx(Image, {\n      source: {\n        uri: image\n      },\n      style: {\n        width: 200,\n        height: 200\n      }\n    })]\n  });\n}","map":{"version":3,"sources":["C:/Users/tizen/OneDrive/Documentos/GitHub/MeuPossante/mobile/src/pages/home/configuracoes/opcoesUsuario/modal/selecionarFoto/index.tsx"],"names":["React","useState","useEffect","ImagePicker","SelecionarFotoGaleria","image","setImage","Platform","OS","requestMediaLibraryPermissionsAsync","status","alert","pickImage","launchImageLibraryAsync","mediaTypes","MediaTypeOptions","Images","allowsEditing","aspect","quality","result","console","log","cancelled","uri","flex","alignItems","justifyContent","width","height"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;;;;AAEA,OAAO,KAAKC,WAAZ,MAA6B,mBAA7B;;;AAEA,eAAe,SAASC,qBAAT,GAAiC;AAAA,kBAEpBH,QAAQ,EAFY;AAAA;AAAA,MAEvCI,KAFuC;AAAA,MAEhCC,QAFgC;;AAI9CJ,EAAAA,SAAS,CAAC,YAAM;AACd,KAAC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,oBACKK,QAAQ,CAACC,EAAT,KAAgB,KADrB;AAAA;AAAA;AAAA;;AAAA;AAAA,+CAGWL,WAAW,CAACM,mCAAZ,EAHX;;AAAA;AAAA;AAEWC,cAAAA,MAFX,yBAEWA,MAFX;;AAAA,oBAIOA,MAAM,KAAK,SAJlB;AAAA;AAAA;AAAA;;AAKKC,cAAAA,KAAK,CAAC,yFAAD,CAAL;AALL;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD;AAUD,GAXQ,EAWN,EAXM,CAAT;;AAaA,MAAMC,SAAS,GAAG,SAAZA,SAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACKT,WAAW,CAACU,uBAAZ,CAAoC;AACvDC,cAAAA,UAAU,EAAEX,WAAW,CAACY,gBAAZ,CAA6BC,MADc;AAEvDC,cAAAA,aAAa,EAAE,IAFwC;AAGvDC,cAAAA,MAAM,EAAE,CAAC,CAAD,EAAI,CAAJ,CAH+C;AAIvDC,cAAAA,OAAO,EAAE;AAJ8C,aAApC,CADL;;AAAA;AACVC,YAAAA,MADU;AAQhBC,YAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;;AARgB,iBAUZA,MAAM,CAACG,SAVK;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAcRC,YAAAA,GAdQ,GAcAJ,MAdA,CAcRI,GAdQ;AAgBhBlB,YAAAA,QAAQ,CAACkB,GAAD,CAAR;;AAhBgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAlB;;AAmBA,SACE,MAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAAEC,MAAAA,IAAI,EAAE,CAAR;AAAWC,MAAAA,UAAU,EAAE,QAAvB;AAAiCC,MAAAA,cAAc,EAAE;AAAjD,KAAb;AAAA,eAEE,KAAC,MAAD;AAAQ,MAAA,KAAK,EAAC,gBAAd;AAA4B,MAAA,OAAO,EAAEf;AAArC,MAFF,EAGGP,KAAK,IACJ,KAAC,KAAD;AAAO,MAAA,MAAM,EAAE;AAAEmB,QAAAA,GAAG,EAAEnB;AAAP,OAAf;AAA+B,MAAA,KAAK,EAAE;AAAEuB,QAAAA,KAAK,EAAE,GAAT;AAAcC,QAAAA,MAAM,EAAE;AAAtB;AAAtC,MAJJ;AAAA,IADF;AASD","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Button, Image, View, Platform } from \"react-native\";\r\nimport * as ImagePicker from \"expo-image-picker\";\r\n\r\nexport default function SelecionarFotoGaleria() {\r\n\r\n  const [image, setImage] = useState<string>();\r\n  \r\n  useEffect(() => {\r\n    (async () => {\r\n      if (Platform.OS !== \"web\") {\r\n        const { status } =\r\n          await ImagePicker.requestMediaLibraryPermissionsAsync();\r\n        if (status !== \"granted\") {\r\n          alert(\"Opa, precisamos da permissão de acesso a galeria para que possamos salvar as imagens :)\");\r\n          return;\r\n        }\r\n      }\r\n    })();\r\n  }, []);\r\n\r\n  const pickImage = async () => {\r\n    const result = await ImagePicker.launchImageLibraryAsync({\r\n      mediaTypes: ImagePicker.MediaTypeOptions.Images,\r\n      allowsEditing: true,\r\n      aspect: [4, 3],\r\n      quality: 1,\r\n    });\r\n\r\n    console.log(result);\r\n\r\n    if (result.cancelled) {\r\n      return;\r\n    }\r\n\r\n    const { uri } = result;\r\n\r\n    setImage(uri)\r\n  };\r\n\r\n  return (\r\n    <View style={{ flex: 1, alignItems: \"center\", justifyContent: \"center\" }}>\r\n      \r\n      <Button title=\"Botão chato\" onPress={pickImage} />\r\n      {image && (\r\n        <Image source={{ uri: image }} style={{ width: 200, height: 200 }} />\r\n      )}\r\n    </View>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from \"react\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport styles from \"./styles\";\nimport { CardField, useConfirmPayment } from '@stripe/stripe-react-native';\nimport { API_URL } from \"../../../../Config\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function Card() {\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      name = _useState2[0],\n      setName = _useState2[1];\n\n  var _useConfirmPayment = useConfirmPayment(),\n      confirmPayment = _useConfirmPayment.confirmPayment,\n      loading = _useConfirmPayment.loading;\n\n  var handlePayPress = function handlePayPress() {\n    var response, _await$response$json, clientsecret, _await$confirmPayment, error, paymentIntent;\n\n    return _regeneratorRuntime.async(function handlePayPress$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(fetch(API_URL + \"/create-payment-intent\", {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify({\n                paymentMethodType: 'card',\n                currency: 'BRL'\n              })\n            }));\n\n          case 2:\n            response = _context.sent;\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 5:\n            _await$response$json = _context.sent;\n            clientsecret = _await$response$json.clientsecret;\n            _context.next = 9;\n            return _regeneratorRuntime.awrap(confirmPayment(clientsecret, {\n              type: 'Card',\n              billingDetails: {\n                name: name\n              }\n            }));\n\n          case 9:\n            _await$confirmPayment = _context.sent;\n            error = _await$confirmPayment.error;\n            paymentIntent = _await$confirmPayment.paymentIntent;\n\n            if (error) {\n              Alert.alert(\"Error code: \" + error.code, error.message);\n            } else if (paymentIntent) {\n              Alert.alert('Success', \"Payment successful: \" + paymentIntent.id);\n            }\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return _jsxs(ScrollView, {\n    children: [_jsx(TextInput, {\n      autoCapitalize: \"none\",\n      placeholder: \"Name\",\n      keyboardType: \"name-phone-pad\",\n      onChange: function onChange(value) {\n        return setName(value.nativeEvent.text);\n      },\n      style: styles.input\n    }), _jsx(CardField, {\n      postalCodeEnabled: false,\n      style: styles.cardField\n    }), _jsx(Button, {\n      title: \"Pay\",\n      onPress: handlePayPress,\n      disabled: loading\n    })]\n  });\n}","map":{"version":3,"sources":["C:/Users/tizen/OneDrive/Documentos/GitHub/MeuPossante/mobile/src/pages/home/subscription/card.tsx"],"names":["React","useState","styles","CardField","useConfirmPayment","API_URL","Card","name","setName","confirmPayment","loading","handlePayPress","fetch","method","headers","body","JSON","stringify","paymentMethodType","currency","response","json","clientsecret","type","billingDetails","error","paymentIntent","Alert","alert","code","message","id","value","nativeEvent","text","input","cardField"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;;;AAEA,OAAOC,MAAP;AACA,SAAQC,SAAR,EAAmBC,iBAAnB,QAA2C,6BAA3C;AACA,SAASC,OAAT;;;AAEA,eAAe,SAASC,IAAT,GAAgB;AAAA,kBACLL,QAAQ,CAAC,EAAD,CADH;AAAA;AAAA,MACtBM,IADsB;AAAA,MAChBC,OADgB;;AAAA,2BAEKJ,iBAAiB,EAFtB;AAAA,MAEtBK,cAFsB,sBAEtBA,cAFsB;AAAA,MAENC,OAFM,sBAENA,OAFM;;AAG7B,MAAMC,cAAc,GAAG,SAAjBA,cAAiB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACEC,KAAK,CAAIP,OAAJ,6BAAoC;AAC9DQ,cAAAA,MAAM,EAAC,MADuD;AAE9DC,cAAAA,OAAO,EAAC;AACN,gCAAgB;AADV,eAFsD;AAK9DC,cAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,gBAAAA,iBAAiB,EAAE,MADA;AAEnBC,gBAAAA,QAAQ,EAAE;AAFS,eAAf;AALwD,aAApC,CADP;;AAAA;AACfC,YAAAA,QADe;AAAA;AAAA,6CAWQA,QAAQ,CAACC,IAAT,EAXR;;AAAA;AAAA;AAWdC,YAAAA,YAXc,wBAWdA,YAXc;AAAA;AAAA,6CAaiBb,cAAc,CAACa,YAAD,EAAc;AAChEC,cAAAA,IAAI,EAAE,MAD0D;AAEhEC,cAAAA,cAAc,EAAE;AAACjB,gBAAAA,IAAI,EAAJA;AAAD;AAFgD,aAAd,CAb/B;;AAAA;AAAA;AAadkB,YAAAA,KAbc,yBAadA,KAbc;AAaPC,YAAAA,aAbO,yBAaPA,aAbO;;AAkBrB,gBAAGD,KAAH,EAAU;AACRE,cAAAA,KAAK,CAACC,KAAN,kBAA2BH,KAAK,CAACI,IAAjC,EAAyCJ,KAAK,CAACK,OAA/C;AACD,aAFD,MAEM,IAAIJ,aAAJ,EAAkB;AACtBC,cAAAA,KAAK,CAACC,KAAN,CAAY,SAAZ,2BAA8CF,aAAa,CAACK,EAA5D;AACD;;AAtBoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAvB;;AAyBA,SACE,MAAC,UAAD;AAAA,eACE,KAAC,SAAD;AAAW,MAAA,cAAc,EAAC,MAA1B;AACA,MAAA,WAAW,EAAC,MADZ;AAEA,MAAA,YAAY,EAAC,gBAFb;AAGA,MAAA,QAAQ,EAAE,kBAACC,KAAD;AAAA,eAAWxB,OAAO,CAACwB,KAAK,CAACC,WAAN,CAAkBC,IAAnB,CAAlB;AAAA,OAHV;AAIA,MAAA,KAAK,EAAGhC,MAAM,CAACiC;AAJf,MADF,EAOE,KAAC,SAAD;AACA,MAAA,iBAAiB,EAAE,KADnB;AAEA,MAAA,KAAK,EAAEjC,MAAM,CAACkC;AAFd,MAPF,EAWE,KAAC,MAAD;AAAQ,MAAA,KAAK,EAAC,KAAd;AAAoB,MAAA,OAAO,EAAEzB,cAA7B;AAA6C,MAAA,QAAQ,EAAED;AAAvD,MAXF;AAAA,IADF;AAeD","sourcesContent":["import React, { useState } from \"react\";\r\nimport { Alert, Button, ScrollView, TextInput } from \"react-native\";\r\nimport styles from './styles'\r\nimport {CardField, useConfirmPayment} from '@stripe/stripe-react-native'\r\nimport { API_URL } from \"../../../../Config\";\r\n\r\nexport default function Card() {\r\n  const [name, setName] = useState(\"\");\r\n  const {confirmPayment, loading} = useConfirmPayment()\r\n  const handlePayPress = async() => {\r\n    const response = await fetch(`${API_URL}/create-payment-intent`,{\r\n      method:'POST',\r\n      headers:{\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({\r\n        paymentMethodType: 'card',\r\n        currency: 'BRL'\r\n      })\r\n    })\r\n    const {clientsecret} = await response.json()\r\n\r\n    const {error, paymentIntent } = await confirmPayment(clientsecret,{\r\n      type: 'Card',\r\n      billingDetails: {name}\r\n    })\r\n\r\n    if(error) {\r\n      Alert.alert(`Error code: ${error.code}`, error.message)\r\n    }else if (paymentIntent){\r\n      Alert.alert('Success', `Payment successful: ${paymentIntent.id}`)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <ScrollView>\r\n      <TextInput autoCapitalize=\"none\" \r\n      placeholder=\"Name\"\r\n      keyboardType=\"name-phone-pad\"\r\n      onChange={(value) => setName(value.nativeEvent.text)}\r\n      style ={styles.input}\r\n      />\r\n      <CardField \r\n      postalCodeEnabled={false}\r\n      style={styles.cardField}\r\n      />\r\n      <Button title=\"Pay\" onPress={handlePayPress} disabled={loading}/>\r\n    </ScrollView>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}